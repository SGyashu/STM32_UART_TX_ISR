
Sep7_uart_tx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd0  08003fd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fd8  08003fd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  2000000c  08003fec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  08003fec  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5ea  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d40  00000000  00000000  0002c669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  0002e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a4  00000000  00000000  0002eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275dc  00000000  00000000  0002f54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c288  00000000  00000000  00056b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2240  00000000  00000000  00062db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027e8  00000000  00000000  00154ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001577d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003f70 	.word	0x08003f70

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003f70 	.word	0x08003f70

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_UART_TxCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t data[2000];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_IT(&huart3, data, sizeof (data));
 80004f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80004f4:	4903      	ldr	r1, [pc, #12]	; (8000504 <HAL_UART_TxCpltCallback+0x1c>)
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <HAL_UART_TxCpltCallback+0x20>)
 80004f8:	f002 fbdc 	bl	8002cb4 <HAL_UART_Transmit_IT>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000180 	.word	0x20000180
 8000508:	200000b0 	.word	0x200000b0

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fac0 	bl	8000a96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f82b 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f8ed 	bl	80006f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800051e:	f000 f8cd 	bl	80006bc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000522:	f000 f86d 	bl	8000600 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000526:	f000 f899 	bl	800065c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  for (int i=0; i<2000; i++)
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e007      	b.n	8000540 <main+0x34>
   {
     data[i] = 'x';
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <main+0x58>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	2278      	movs	r2, #120	; 0x78
 8000538:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<2000; i++)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000546:	dbf3      	blt.n	8000530 <main+0x24>
   }

  HAL_UART_Transmit_IT(&huart3, data, sizeof (data));
 8000548:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800054c:	4905      	ldr	r1, [pc, #20]	; (8000564 <main+0x58>)
 800054e:	4806      	ldr	r0, [pc, #24]	; (8000568 <main+0x5c>)
 8000550:	f002 fbb0 	bl	8002cb4 <HAL_UART_Transmit_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (GPIOB,GPIO_PIN_7);
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <main+0x60>)
 8000558:	f000 ffd8 	bl	800150c <HAL_GPIO_TogglePin>

       HAL_Delay (250);  // 250 ms delay
 800055c:	20fa      	movs	r0, #250	; 0xfa
 800055e:	f000 fb0f 	bl	8000b80 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOB,GPIO_PIN_7);
 8000562:	e7f7      	b.n	8000554 <main+0x48>
 8000564:	20000180 	.word	0x20000180
 8000568:	200000b0 	.word	0x200000b0
 800056c:	48000400 	.word	0x48000400

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fcc9 	bl	8003f16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f000 ffe1 	bl	800155c <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 f900 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a4:	2310      	movs	r3, #16
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80005b0:	2390      	movs	r3, #144	; 0x90
 80005b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f823 	bl	8001608 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005c8:	f000 f8ec 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005d4:	2390      	movs	r3, #144	; 0x90
 80005d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fc28 	bl	8001e3c <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005f2:	f000 f8d7 	bl	80007a4 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3758      	adds	r7, #88	; 0x58
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_LPUART1_UART_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_LPUART1_UART_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 8000612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000616:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_LPUART1_UART_Init+0x50>)
 800063e:	f002 faeb 	bl	8002c18 <HAL_UART_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f8ac 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000028 	.word	0x20000028
 8000654:	40008000 	.word	0x40008000
 8000658:	00033324 	.word	0x00033324

0800065c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_USART3_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000668:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800066c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART3_UART_Init+0x58>)
 80006a0:	f002 faba 	bl	8002c18 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006aa:	f000 f87b 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000b0 	.word	0x200000b0
 80006b8:	40004800 	.word	0x40004800

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DMA_Init+0x38>)
 80006c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <MX_DMA_Init+0x38>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6493      	str	r3, [r2, #72]	; 0x48
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_DMA_Init+0x38>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200d      	movs	r0, #13
 80006e0:	f000 fb4d 	bl	8000d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006e4:	200d      	movs	r0, #13
 80006e6:	f000 fb66 	bl	8000db6 <HAL_NVIC_EnableIRQ>

}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0xa4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <MX_GPIO_Init+0xa4>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_GPIO_Init+0xa4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_GPIO_Init+0xa4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_GPIO_Init+0xa4>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_GPIO_Init+0xa4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_GPIO_Init+0xa4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <MX_GPIO_Init+0xa4>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_GPIO_Init+0xa4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_GPIO_Init+0xa4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <MX_GPIO_Init+0xa4>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_GPIO_Init+0xa4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0xa8>)
 8000774:	f000 feb2 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xa8>)
 8000790:	f000 fd12 	bl	80011b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000400 	.word	0x48000400

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_MspInit+0x44>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6613      	str	r3, [r2, #96]	; 0x60
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_MspInit+0x44>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6593      	str	r3, [r2, #88]	; 0x58
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0ae      	sub	sp, #184	; 0xb8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	228c      	movs	r2, #140	; 0x8c
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f003 fb7c 	bl	8003f16 <memset>
  if(huart->Instance==LPUART1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a5a      	ldr	r2, [pc, #360]	; (800098c <HAL_UART_MspInit+0x194>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d13b      	bne.n	80008a0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000828:	2320      	movs	r3, #32
 800082a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800082c:	2300      	movs	r3, #0
 800082e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fd25 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000840:	f7ff ffb0 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000844:	4b52      	ldr	r3, [pc, #328]	; (8000990 <HAL_UART_MspInit+0x198>)
 8000846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000848:	4a51      	ldr	r2, [pc, #324]	; (8000990 <HAL_UART_MspInit+0x198>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000850:	4b4f      	ldr	r3, [pc, #316]	; (8000990 <HAL_UART_MspInit+0x198>)
 8000852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b4c      	ldr	r3, [pc, #304]	; (8000990 <HAL_UART_MspInit+0x198>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a4b      	ldr	r2, [pc, #300]	; (8000990 <HAL_UART_MspInit+0x198>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b49      	ldr	r3, [pc, #292]	; (8000990 <HAL_UART_MspInit+0x198>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000874:	2303      	movs	r3, #3
 8000876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800088c:	2308      	movs	r3, #8
 800088e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000896:	4619      	mov	r1, r3
 8000898:	483e      	ldr	r0, [pc, #248]	; (8000994 <HAL_UART_MspInit+0x19c>)
 800089a:	f000 fc8d 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800089e:	e070      	b.n	8000982 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a3c      	ldr	r2, [pc, #240]	; (8000998 <HAL_UART_MspInit+0x1a0>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d16b      	bne.n	8000982 <HAL_UART_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008aa:	2304      	movs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fce4 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80008c2:	f7ff ff6f 	bl	80007a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008c6:	4b32      	ldr	r3, [pc, #200]	; (8000990 <HAL_UART_MspInit+0x198>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a31      	ldr	r2, [pc, #196]	; (8000990 <HAL_UART_MspInit+0x198>)
 80008cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <HAL_UART_MspInit+0x198>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <HAL_UART_MspInit+0x198>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a2b      	ldr	r2, [pc, #172]	; (8000990 <HAL_UART_MspInit+0x198>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b29      	ldr	r3, [pc, #164]	; (8000990 <HAL_UART_MspInit+0x198>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008f6:	2330      	movs	r3, #48	; 0x30
 80008f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800090e:	2307      	movs	r3, #7
 8000910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000918:	4619      	mov	r1, r3
 800091a:	481e      	ldr	r0, [pc, #120]	; (8000994 <HAL_UART_MspInit+0x19c>)
 800091c:	f000 fc4c 	bl	80011b8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_UART_MspInit+0x1a4>)
 8000922:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <HAL_UART_MspInit+0x1a8>)
 8000924:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <HAL_UART_MspInit+0x1a4>)
 8000928:	2202      	movs	r2, #2
 800092a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <HAL_UART_MspInit+0x1a4>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <HAL_UART_MspInit+0x1a4>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_UART_MspInit+0x1a4>)
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_UART_MspInit+0x1a4>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_UART_MspInit+0x1a4>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_UART_MspInit+0x1a4>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_UART_MspInit+0x1a4>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <HAL_UART_MspInit+0x1a4>)
 8000958:	f000 fa48 	bl	8000dec <HAL_DMA_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8000962:	f7ff ff1f 	bl	80007a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <HAL_UART_MspInit+0x1a4>)
 800096a:	675a      	str	r2, [r3, #116]	; 0x74
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <HAL_UART_MspInit+0x1a4>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2027      	movs	r0, #39	; 0x27
 8000978:	f000 fa01 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800097c:	2027      	movs	r0, #39	; 0x27
 800097e:	f000 fa1a 	bl	8000db6 <HAL_NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	37b8      	adds	r7, #184	; 0xb8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40008000 	.word	0x40008000
 8000990:	40021000 	.word	0x40021000
 8000994:	48000800 	.word	0x48000800
 8000998:	40004800 	.word	0x40004800
 800099c:	20000138 	.word	0x20000138
 80009a0:	40020030 	.word	0x40020030

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f8a6 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <DMA1_Channel3_IRQHandler+0x10>)
 80009fe:	f000 fb2c 	bl	800105a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000138 	.word	0x20000138

08000a0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <USART3_IRQHandler+0x10>)
 8000a12:	f002 f9ad 	bl	8002d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000b0 	.word	0x200000b0

08000a20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a48:	f7ff ffea 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f003 fa59 	bl	8003f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a76:	f7ff fd49 	bl	800050c <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a88:	08003fe0 	.word	0x08003fe0
  ldr r2, =_sbss
 8000a8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a90:	20000954 	.word	0x20000954

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>

08000a96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f961 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f80e 	bl	8000ac8 <HAL_InitTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d002      	beq.n	8000ab8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	e001      	b.n	8000abc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab8:	f7ff fe7a 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_InitTick+0x6c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d023      	beq.n	8000b24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_InitTick+0x70>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_InitTick+0x6c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f96d 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10f      	bne.n	8000b1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d809      	bhi.n	8000b18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 f937 	bl	8000d7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_InitTick+0x74>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e007      	b.n	8000b28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	e004      	b.n	8000b28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73fb      	strb	r3, [r7, #15]
 8000b22:	e001      	b.n	8000b28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000950 	.word	0x20000950

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000950 	.word	0x20000950

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_Delay+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f7ff ff8e 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff29 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff3e 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff8e 	bl	8000cbc <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff31 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffa2 	bl	8000d24 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e098      	b.n	8000f30 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <HAL_DMA_Init+0x150>)
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d80f      	bhi.n	8000e2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <HAL_DMA_Init+0x154>)
 8000e12:	4413      	add	r3, r2
 8000e14:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <HAL_DMA_Init+0x158>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	009a      	lsls	r2, r3, #2
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <HAL_DMA_Init+0x15c>)
 8000e26:	641a      	str	r2, [r3, #64]	; 0x40
 8000e28:	e00e      	b.n	8000e48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b46      	ldr	r3, [pc, #280]	; (8000f4c <HAL_DMA_Init+0x160>)
 8000e32:	4413      	add	r3, r2
 8000e34:	4a43      	ldr	r2, [pc, #268]	; (8000f44 <HAL_DMA_Init+0x158>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	009a      	lsls	r2, r3, #2
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a42      	ldr	r2, [pc, #264]	; (8000f50 <HAL_DMA_Init+0x164>)
 8000e46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ea2:	d039      	beq.n	8000f18 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <HAL_DMA_Init+0x15c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11a      	bne.n	8000ee4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eae:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <HAL_DMA_Init+0x168>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f003 031c 	and.w	r3, r3, #28
 8000eba:	210f      	movs	r1, #15
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	4924      	ldr	r1, [pc, #144]	; (8000f54 <HAL_DMA_Init+0x168>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <HAL_DMA_Init+0x168>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6859      	ldr	r1, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	f003 031c 	and.w	r3, r3, #28
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	491d      	ldr	r1, [pc, #116]	; (8000f54 <HAL_DMA_Init+0x168>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
 8000ee2:	e019      	b.n	8000f18 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_DMA_Init+0x16c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eec:	f003 031c 	and.w	r3, r3, #28
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	4917      	ldr	r1, [pc, #92]	; (8000f58 <HAL_DMA_Init+0x16c>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_DMA_Init+0x16c>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6859      	ldr	r1, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f003 031c 	and.w	r3, r3, #28
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	4911      	ldr	r1, [pc, #68]	; (8000f58 <HAL_DMA_Init+0x16c>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40020407 	.word	0x40020407
 8000f40:	bffdfff8 	.word	0xbffdfff8
 8000f44:	cccccccd 	.word	0xcccccccd
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	bffdfbf8 	.word	0xbffdfbf8
 8000f50:	40020400 	.word	0x40020400
 8000f54:	400200a8 	.word	0x400200a8
 8000f58:	400204a8 	.word	0x400204a8

08000f5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d008      	beq.n	8000f86 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2204      	movs	r2, #4
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e022      	b.n	8000fcc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 020e 	bic.w	r2, r2, #14
 8000f94:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0201 	bic.w	r2, r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f003 021c 	and.w	r2, r3, #28
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d005      	beq.n	8000ffc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e029      	b.n	8001050 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 020e 	bic.w	r2, r2, #14
 800100a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001020:	f003 021c 	and.w	r2, r3, #28
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	2101      	movs	r1, #1
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	4798      	blx	r3
    }
  }
  return status;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f003 031c 	and.w	r3, r3, #28
 800107a:	2204      	movs	r2, #4
 800107c:	409a      	lsls	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4013      	ands	r3, r2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d026      	beq.n	80010d4 <HAL_DMA_IRQHandler+0x7a>
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	d021      	beq.n	80010d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	2b00      	cmp	r3, #0
 800109c:	d107      	bne.n	80010ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0204 	bic.w	r2, r2, #4
 80010ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f003 021c 	and.w	r2, r3, #28
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	2104      	movs	r1, #4
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d071      	beq.n	80011ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010d2:	e06c      	b.n	80011ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	f003 031c 	and.w	r3, r3, #28
 80010dc:	2202      	movs	r2, #2
 80010de:	409a      	lsls	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d02e      	beq.n	8001146 <HAL_DMA_IRQHandler+0xec>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d029      	beq.n	8001146 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10b      	bne.n	8001118 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 020a 	bic.w	r2, r2, #10
 800110e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f003 021c 	and.w	r2, r3, #28
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	2102      	movs	r1, #2
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	2b00      	cmp	r3, #0
 800113a:	d038      	beq.n	80011ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001144:	e033      	b.n	80011ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 031c 	and.w	r3, r3, #28
 800114e:	2208      	movs	r2, #8
 8001150:	409a      	lsls	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d02a      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x156>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d025      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 020e 	bic.w	r2, r2, #14
 8001172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f003 021c 	and.w	r2, r3, #28
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
}
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	e166      	b.n	8001496 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 8158 	beq.w	8001490 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d005      	beq.n	80011f8 <HAL_GPIO_Init+0x40>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d130      	bne.n	800125a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800122e:	2201      	movs	r2, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	f003 0201 	and.w	r2, r3, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b03      	cmp	r3, #3
 8001264:	d017      	beq.n	8001296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d123      	bne.n	80012ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	6939      	ldr	r1, [r7, #16]
 80012e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0203 	and.w	r2, r3, #3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80b2 	beq.w	8001490 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	4b61      	ldr	r3, [pc, #388]	; (80014b4 <HAL_GPIO_Init+0x2fc>)
 800132e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001330:	4a60      	ldr	r2, [pc, #384]	; (80014b4 <HAL_GPIO_Init+0x2fc>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6613      	str	r3, [r2, #96]	; 0x60
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <HAL_GPIO_Init+0x2fc>)
 800133a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001344:	4a5c      	ldr	r2, [pc, #368]	; (80014b8 <HAL_GPIO_Init+0x300>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800136e:	d02b      	beq.n	80013c8 <HAL_GPIO_Init+0x210>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a52      	ldr	r2, [pc, #328]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d025      	beq.n	80013c4 <HAL_GPIO_Init+0x20c>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a51      	ldr	r2, [pc, #324]	; (80014c0 <HAL_GPIO_Init+0x308>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d01f      	beq.n	80013c0 <HAL_GPIO_Init+0x208>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a50      	ldr	r2, [pc, #320]	; (80014c4 <HAL_GPIO_Init+0x30c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d019      	beq.n	80013bc <HAL_GPIO_Init+0x204>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <HAL_GPIO_Init+0x310>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d013      	beq.n	80013b8 <HAL_GPIO_Init+0x200>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <HAL_GPIO_Init+0x314>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d00d      	beq.n	80013b4 <HAL_GPIO_Init+0x1fc>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a4d      	ldr	r2, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x318>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d007      	beq.n	80013b0 <HAL_GPIO_Init+0x1f8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x31c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d101      	bne.n	80013ac <HAL_GPIO_Init+0x1f4>
 80013a8:	2307      	movs	r3, #7
 80013aa:	e00e      	b.n	80013ca <HAL_GPIO_Init+0x212>
 80013ac:	2308      	movs	r3, #8
 80013ae:	e00c      	b.n	80013ca <HAL_GPIO_Init+0x212>
 80013b0:	2306      	movs	r3, #6
 80013b2:	e00a      	b.n	80013ca <HAL_GPIO_Init+0x212>
 80013b4:	2305      	movs	r3, #5
 80013b6:	e008      	b.n	80013ca <HAL_GPIO_Init+0x212>
 80013b8:	2304      	movs	r3, #4
 80013ba:	e006      	b.n	80013ca <HAL_GPIO_Init+0x212>
 80013bc:	2303      	movs	r3, #3
 80013be:	e004      	b.n	80013ca <HAL_GPIO_Init+0x212>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e002      	b.n	80013ca <HAL_GPIO_Init+0x212>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <HAL_GPIO_Init+0x212>
 80013c8:	2300      	movs	r3, #0
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	f002 0203 	and.w	r2, r2, #3
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	4093      	lsls	r3, r2
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013da:	4937      	ldr	r1, [pc, #220]	; (80014b8 <HAL_GPIO_Init+0x300>)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <HAL_GPIO_Init+0x320>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800140c:	4a32      	ldr	r2, [pc, #200]	; (80014d8 <HAL_GPIO_Init+0x320>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <HAL_GPIO_Init+0x320>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001436:	4a28      	ldr	r2, [pc, #160]	; (80014d8 <HAL_GPIO_Init+0x320>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <HAL_GPIO_Init+0x320>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_GPIO_Init+0x320>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_GPIO_Init+0x320>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_GPIO_Init+0x320>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f47f ae91 	bne.w	80011c8 <HAL_GPIO_Init+0x10>
  }
}
 80014a6:	bf00      	nop
 80014a8:	bf00      	nop
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000
 80014bc:	48000400 	.word	0x48000400
 80014c0:	48000800 	.word	0x48000800
 80014c4:	48000c00 	.word	0x48000c00
 80014c8:	48001000 	.word	0x48001000
 80014cc:	48001400 	.word	0x48001400
 80014d0:	48001800 	.word	0x48001800
 80014d4:	48001c00 	.word	0x48001c00
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43d9      	mvns	r1, r3
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	400b      	ands	r3, r1
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <HAL_PWREx_GetVoltageRange+0x18>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40007000 	.word	0x40007000

0800155c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156a:	d130      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001578:	d038      	beq.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001588:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2232      	movs	r2, #50	; 0x32
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0c9b      	lsrs	r3, r3, #18
 800159c:	3301      	adds	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a0:	e002      	b.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b4:	d102      	bne.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f2      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c8:	d110      	bne.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e00f      	b.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015da:	d007      	beq.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015e4:	4a05      	ldr	r2, [pc, #20]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40007000 	.word	0x40007000
 8001600:	20000000 	.word	0x20000000
 8001604:	431bde83 	.word	0x431bde83

08001608 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f000 bc08 	b.w	8001e2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161c:	4b96      	ldr	r3, [pc, #600]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001626:	4b94      	ldr	r3, [pc, #592]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80e4 	beq.w	8001806 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <HAL_RCC_OscConfig+0x4c>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b0c      	cmp	r3, #12
 8001648:	f040 808b 	bne.w	8001762 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b01      	cmp	r3, #1
 8001650:	f040 8087 	bne.w	8001762 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001654:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x64>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e3df      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	4b81      	ldr	r3, [pc, #516]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d004      	beq.n	8001686 <HAL_RCC_OscConfig+0x7e>
 800167c:	4b7e      	ldr	r3, [pc, #504]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001684:	e005      	b.n	8001692 <HAL_RCC_OscConfig+0x8a>
 8001686:	4b7c      	ldr	r3, [pc, #496]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001692:	4293      	cmp	r3, r2
 8001694:	d223      	bcs.n	80016de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fd92 	bl	80021c4 <RCC_SetFlashLatencyFromMSIRange>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e3c0      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016aa:	4b73      	ldr	r3, [pc, #460]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a72      	ldr	r2, [pc, #456]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b70      	ldr	r3, [pc, #448]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	496d      	ldr	r1, [pc, #436]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c8:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	4968      	ldr	r1, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
 80016dc:	e025      	b.n	800172a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016de:	4b66      	ldr	r3, [pc, #408]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a65      	ldr	r2, [pc, #404]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4960      	ldr	r1, [pc, #384]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fc:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	495b      	ldr	r1, [pc, #364]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fd52 	bl	80021c4 <RCC_SetFlashLatencyFromMSIRange>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e380      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800172a:	f000 fc87 	bl	800203c <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b51      	ldr	r3, [pc, #324]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	4950      	ldr	r1, [pc, #320]	; (800187c <HAL_RCC_OscConfig+0x274>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	4a4e      	ldr	r2, [pc, #312]	; (8001880 <HAL_RCC_OscConfig+0x278>)
 8001748:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800174a:	4b4e      	ldr	r3, [pc, #312]	; (8001884 <HAL_RCC_OscConfig+0x27c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f9ba 	bl	8000ac8 <HAL_InitTick>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d052      	beq.n	8001804 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	e364      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d032      	beq.n	80017d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a42      	ldr	r2, [pc, #264]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001776:	f7ff f9f7 	bl	8000b68 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800177e:	f7ff f9f3 	bl	8000b68 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e34d      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001790:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179c:	4b36      	ldr	r3, [pc, #216]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a35      	ldr	r2, [pc, #212]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80017a2:	f043 0308 	orr.w	r3, r3, #8
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4930      	ldr	r1, [pc, #192]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ba:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	492b      	ldr	r1, [pc, #172]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
 80017ce:	e01a      	b.n	8001806 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a28      	ldr	r2, [pc, #160]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017dc:	f7ff f9c4 	bl	8000b68 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e4:	f7ff f9c0 	bl	8000b68 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e31a      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1dc>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d073      	beq.n	80018fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b08      	cmp	r3, #8
 8001816:	d005      	beq.n	8001824 <HAL_RCC_OscConfig+0x21c>
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d10e      	bne.n	800183c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d10b      	bne.n	800183c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d063      	beq.n	80018f8 <HAL_RCC_OscConfig+0x2f0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d15f      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e2f7      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x24c>
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e025      	b.n	80018a0 <HAL_RCC_OscConfig+0x298>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d114      	bne.n	8001888 <HAL_RCC_OscConfig+0x280>
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a02      	ldr	r2, [pc, #8]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e013      	b.n	80018a0 <HAL_RCC_OscConfig+0x298>
 8001878:	40021000 	.word	0x40021000
 800187c:	08003f88 	.word	0x08003f88
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004
 8001888:	4ba0      	ldr	r3, [pc, #640]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a9f      	ldr	r2, [pc, #636]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 800188e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b9d      	ldr	r3, [pc, #628]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a9c      	ldr	r2, [pc, #624]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f95e 	bl	8000b68 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff f95a 	bl	8000b68 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e2b4      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c2:	4b92      	ldr	r3, [pc, #584]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2a8>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff f94a 	bl	8000b68 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff f946 	bl	8000b68 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e2a0      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2d0>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d060      	beq.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x310>
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d119      	bne.n	8001946 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d116      	bne.n	8001946 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001918:	4b7c      	ldr	r3, [pc, #496]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_OscConfig+0x328>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e27d      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	4973      	ldr	r1, [pc, #460]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001944:	e040      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d023      	beq.n	8001996 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194e:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6e      	ldr	r2, [pc, #440]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f905 	bl	8000b68 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff f901 	bl	8000b68 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e25b      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001974:	4b65      	ldr	r3, [pc, #404]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	495f      	ldr	r1, [pc, #380]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
 8001994:	e018      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a5c      	ldr	r2, [pc, #368]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 800199c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff f8e1 	bl	8000b68 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff f8dd 	bl	8000b68 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e237      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d01c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019dc:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	4a4a      	ldr	r2, [pc, #296]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ec:	f7ff f8bc 	bl	8000b68 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f4:	f7ff f8b8 	bl	8000b68 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e212      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a06:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ef      	beq.n	80019f4 <HAL_RCC_OscConfig+0x3ec>
 8001a14:	e01b      	b.n	8001a4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1c:	4a3b      	ldr	r2, [pc, #236]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff f89f 	bl	8000b68 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f89b 	bl	8000b68 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1f5      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ef      	bne.n	8001a2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80a6 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10d      	bne.n	8001a88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	4a26      	ldr	r2, [pc, #152]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a76:	6593      	str	r3, [r2, #88]	; 0x58
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a84:	2301      	movs	r3, #1
 8001a86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d118      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f862 	bl	8000b68 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa8:	f7ff f85e 	bl	8000b68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1b8      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4d8>
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ade:	e029      	b.n	8001b34 <HAL_RCC_OscConfig+0x52c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d115      	bne.n	8001b14 <HAL_RCC_OscConfig+0x50c>
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x52c>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40007000 	.word	0x40007000
 8001b14:	4b9d      	ldr	r3, [pc, #628]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	4a9c      	ldr	r2, [pc, #624]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b24:	4b99      	ldr	r3, [pc, #612]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d016      	beq.n	8001b6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f814 	bl	8000b68 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f810 	bl	8000b68 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e168      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5a:	4b8c      	ldr	r3, [pc, #560]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ed      	beq.n	8001b44 <HAL_RCC_OscConfig+0x53c>
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7fe fffd 	bl	8000b68 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7fe fff9 	bl	8000b68 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e151      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b88:	4b80      	ldr	r3, [pc, #512]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ed      	bne.n	8001b72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b96:	7ffb      	ldrb	r3, [r7, #31]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	4a7a      	ldr	r2, [pc, #488]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d03c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bbc:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc2:	4a72      	ldr	r2, [pc, #456]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7fe ffcc 	bl	8000b68 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd4:	f7fe ffc8 	bl	8000b68 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e122      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be6:	4b69      	ldr	r3, [pc, #420]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ef      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x5cc>
 8001bf4:	e01b      	b.n	8001c2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bf6:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bfc:	4a63      	ldr	r2, [pc, #396]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c06:	f7fe ffaf 	bl	8000b68 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0e:	f7fe ffab 	bl	8000b68 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e105      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c20:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ef      	bne.n	8001c0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80f9 	beq.w	8001e2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	f040 80cf 	bne.w	8001de0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c42:	4b52      	ldr	r3, [pc, #328]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0203 	and.w	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d12c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	3b01      	subs	r3, #1
 8001c62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d123      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d11b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d113      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	3b01      	subs	r3, #1
 8001c96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d109      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	085b      	lsrs	r3, r3, #1
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d071      	beq.n	8001d94 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d068      	beq.n	8001d88 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cb6:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0ac      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2d      	ldr	r2, [pc, #180]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cde:	f7fe ff43 	bl	8000b68 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7fe ff3f 	bl	8000b68 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e099      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_RCC_OscConfig+0x788>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d14:	3a01      	subs	r2, #1
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d1e:	0212      	lsls	r2, r2, #8
 8001d20:	4311      	orrs	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d26:	0852      	lsrs	r2, r2, #1
 8001d28:	3a01      	subs	r2, #1
 8001d2a:	0552      	lsls	r2, r2, #21
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d32:	0852      	lsrs	r2, r2, #1
 8001d34:	3a01      	subs	r2, #1
 8001d36:	0652      	lsls	r2, r2, #25
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d3e:	06d2      	lsls	r2, r2, #27
 8001d40:	430a      	orrs	r2, r1
 8001d42:	4912      	ldr	r1, [pc, #72]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d60:	f7fe ff02 	bl	8000b68 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fefe 	bl	8000b68 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e058      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d86:	e050      	b.n	8001e2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e04f      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d144      	bne.n	8001e2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001daa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001db8:	f7fe fed6 	bl	8000b68 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe fed2 	bl	8000b68 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e02c      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x7b8>
 8001dde:	e024      	b.n	8001e2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d01f      	beq.n	8001e26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7fe feb9 	bl	8000b68 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe feb5 	bl	8000b68 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	4905      	ldr	r1, [pc, #20]	; (8001e34 <HAL_RCC_OscConfig+0x82c>)
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_OscConfig+0x830>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
 8001e24:	e001      	b.n	8001e2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	feeefffc 	.word	0xfeeefffc

08001e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0e7      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b75      	ldr	r3, [pc, #468]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d910      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b72      	ldr	r3, [pc, #456]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 0207 	bic.w	r2, r3, #7
 8001e66:	4970      	ldr	r1, [pc, #448]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0cf      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4b66      	ldr	r3, [pc, #408]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d908      	bls.n	8001eae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4960      	ldr	r1, [pc, #384]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d04c      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d121      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0a6      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	4b54      	ldr	r3, [pc, #336]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d115      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e09a      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ef2:	4b4e      	ldr	r3, [pc, #312]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e08e      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f02:	4b4a      	ldr	r3, [pc, #296]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e086      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4943      	ldr	r1, [pc, #268]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f24:	f7fe fe20 	bl	8000b68 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7fe fe1c 	bl	8000b68 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e06e      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 020c 	and.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1eb      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d010      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d208      	bcs.n	8001f82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	492b      	ldr	r1, [pc, #172]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d210      	bcs.n	8001fb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0207 	bic.w	r2, r3, #7
 8001f98:	4923      	ldr	r1, [pc, #140]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e036      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4918      	ldr	r1, [pc, #96]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4910      	ldr	r1, [pc, #64]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ff0:	f000 f824 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	490b      	ldr	r1, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x1f4>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1f8>)
 800200e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fd57 	bl	8000ac8 <HAL_InitTick>
 800201a:	4603      	mov	r3, r0
 800201c:	72fb      	strb	r3, [r7, #11]

  return status;
 800201e:	7afb      	ldrb	r3, [r7, #11]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40022000 	.word	0x40022000
 800202c:	40021000 	.word	0x40021000
 8002030:	08003f88 	.word	0x08003f88
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x34>
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d121      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d11e      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002070:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d107      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800207c:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	e005      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002098:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <HAL_RCC_GetSysClockFreq+0x10c>)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d102      	bne.n	80020ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_RCC_GetSysClockFreq+0x110>)
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	e004      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_RCC_GetSysClockFreq+0x114>)
 80020c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d134      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d003      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0xac>
 80020e0:	e005      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_RCC_GetSysClockFreq+0x110>)
 80020e4:	617b      	str	r3, [r7, #20]
      break;
 80020e6:	e005      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCC_GetSysClockFreq+0x114>)
 80020ea:	617b      	str	r3, [r7, #20]
      break;
 80020ec:	e002      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	617b      	str	r3, [r7, #20]
      break;
 80020f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	3301      	adds	r3, #1
 8002100:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	fb03 f202 	mul.w	r2, r3, r2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	0e5b      	lsrs	r3, r3, #25
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	3301      	adds	r3, #1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002134:	69bb      	ldr	r3, [r7, #24]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	08003fa0 	.word	0x08003fa0
 800214c:	00f42400 	.word	0x00f42400
 8002150:	007a1200 	.word	0x007a1200

08002154 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_RCC_GetHCLKFreq+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000000 	.word	0x20000000

0800216c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002170:	f7ff fff0 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4904      	ldr	r1, [pc, #16]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	08003f98 	.word	0x08003f98

08002198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800219c:	f7ff ffda 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	0adb      	lsrs	r3, r3, #11
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4904      	ldr	r1, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08003f98 	.word	0x08003f98

080021c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021dc:	f7ff f9b0 	bl	8001540 <HAL_PWREx_GetVoltageRange>
 80021e0:	6178      	str	r0, [r7, #20]
 80021e2:	e014      	b.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	4a24      	ldr	r2, [pc, #144]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6593      	str	r3, [r2, #88]	; 0x58
 80021f0:	4b22      	ldr	r3, [pc, #136]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021fc:	f7ff f9a0 	bl	8001540 <HAL_PWREx_GetVoltageRange>
 8002200:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002214:	d10b      	bne.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d919      	bls.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2ba0      	cmp	r3, #160	; 0xa0
 8002220:	d902      	bls.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002222:	2302      	movs	r3, #2
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	e013      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002228:	2301      	movs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e010      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d902      	bls.n	800223a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002234:	2303      	movs	r3, #3
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	e00a      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d102      	bne.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002240:	2302      	movs	r3, #2
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e004      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b70      	cmp	r3, #112	; 0x70
 800224a:	d101      	bne.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800224c:	2301      	movs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 0207 	bic.w	r2, r3, #7
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	40022000 	.word	0x40022000

08002284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800228c:	2300      	movs	r3, #0
 800228e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002290:	2300      	movs	r3, #0
 8002292:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800229c:	2b00      	cmp	r3, #0
 800229e:	d041      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022a8:	d02a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022ae:	d824      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022b4:	d008      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022ba:	d81e      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c4:	d010      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022c6:	e018      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022c8:	4b86      	ldr	r3, [pc, #536]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a85      	ldr	r2, [pc, #532]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d4:	e015      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 facd 	bl	800287c <RCCEx_PLLSAI1_Config>
 80022e2:	4603      	mov	r3, r0
 80022e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e6:	e00c      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3320      	adds	r3, #32
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fbb6 	bl	8002a60 <RCCEx_PLLSAI2_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f8:	e003      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	74fb      	strb	r3, [r7, #19]
      break;
 80022fe:	e000      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002308:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002316:	4973      	ldr	r1, [pc, #460]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800231e:	e001      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d041      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002338:	d02a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800233a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800233e:	d824      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002344:	d008      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800234a:	d81e      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002354:	d010      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002356:	e018      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002358:	4b62      	ldr	r3, [pc, #392]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a61      	ldr	r2, [pc, #388]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002362:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002364:	e015      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fa85 	bl	800287c <RCCEx_PLLSAI1_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002376:	e00c      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3320      	adds	r3, #32
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fb6e 	bl	8002a60 <RCCEx_PLLSAI2_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002388:	e003      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	74fb      	strb	r3, [r7, #19]
      break;
 800238e:	e000      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002398:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a6:	494f      	ldr	r1, [pc, #316]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ae:	e001      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80a0 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	4a40      	ldr	r2, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e6:	6593      	str	r3, [r2, #88]	; 0x58
 80023e8:	4b3e      	ldr	r3, [pc, #248]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f4:	2301      	movs	r3, #1
 80023f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f8:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a3a      	ldr	r2, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002402:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002404:	f7fe fbb0 	bl	8000b68 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800240a:	e009      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240c:	f7fe fbac 	bl	8000b68 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d902      	bls.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	74fb      	strb	r3, [r7, #19]
        break;
 800241e:	e005      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002420:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ef      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d15c      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01f      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	d019      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002450:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	4a20      	ldr	r2, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fb6b 	bl	8000b68 <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002494:	e00b      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fb67 	bl	8000b68 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d902      	bls.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	74fb      	strb	r3, [r7, #19]
            break;
 80024ac:	e006      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ec      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	4904      	ldr	r1, [pc, #16]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024da:	e009      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
 80024e0:	e006      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4ba6      	ldr	r3, [pc, #664]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aa5      	ldr	r2, [pc, #660]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba0      	ldr	r3, [pc, #640]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	499c      	ldr	r1, [pc, #624]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4b97      	ldr	r3, [pc, #604]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	4994      	ldr	r1, [pc, #592]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b8f      	ldr	r3, [pc, #572]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	498b      	ldr	r1, [pc, #556]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b86      	ldr	r3, [pc, #536]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4983      	ldr	r1, [pc, #524]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b7e      	ldr	r3, [pc, #504]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	497a      	ldr	r1, [pc, #488]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b75      	ldr	r3, [pc, #468]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	4972      	ldr	r1, [pc, #456]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025da:	4b6d      	ldr	r3, [pc, #436]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e8:	4969      	ldr	r1, [pc, #420]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025fc:	4b64      	ldr	r3, [pc, #400]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800260a:	4961      	ldr	r1, [pc, #388]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800261e:	4b5c      	ldr	r3, [pc, #368]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262c:	4958      	ldr	r1, [pc, #352]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	4950      	ldr	r1, [pc, #320]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002662:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	4947      	ldr	r1, [pc, #284]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002684:	4b42      	ldr	r3, [pc, #264]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	493f      	ldr	r1, [pc, #252]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d028      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026a6:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4936      	ldr	r1, [pc, #216]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c4:	d106      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a31      	ldr	r2, [pc, #196]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d0:	60d3      	str	r3, [r2, #12]
 80026d2:	e011      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f8c9 	bl	800287c <RCCEx_PLLSAI1_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d028      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	491f      	ldr	r1, [pc, #124]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002722:	d106      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800272a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272e:	60d3      	str	r3, [r2, #12]
 8002730:	e011      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800273a:	d10c      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2101      	movs	r1, #1
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f89a 	bl	800287c <RCCEx_PLLSAI1_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d02a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002770:	4907      	ldr	r1, [pc, #28]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002780:	d108      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002782:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4a02      	ldr	r2, [pc, #8]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278c:	60d3      	str	r3, [r2, #12]
 800278e:	e013      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002790:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2101      	movs	r1, #1
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f869 	bl	800287c <RCCEx_PLLSAI1_Config>
 80027aa:	4603      	mov	r3, r0
 80027ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d02f      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d2:	4929      	ldr	r1, [pc, #164]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027e2:	d10d      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	2102      	movs	r1, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f846 	bl	800287c <RCCEx_PLLSAI1_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d014      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	74bb      	strb	r3, [r7, #18]
 80027fe:	e011      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002808:	d10c      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3320      	adds	r3, #32
 800280e:	2102      	movs	r1, #2
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f925 	bl	8002a60 <RCCEx_PLLSAI2_Config>
 8002816:	4603      	mov	r3, r0
 8002818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002840:	490d      	ldr	r1, [pc, #52]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00b      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	4904      	ldr	r1, [pc, #16]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800286c:	7cbb      	ldrb	r3, [r7, #18]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800288a:	4b74      	ldr	r3, [pc, #464]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d018      	beq.n	80028c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002896:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10d      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
       ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ae:	4b6b      	ldr	r3, [pc, #428]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
       ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d047      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e044      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d018      	beq.n	8002902 <RCCEx_PLLSAI1_Config+0x86>
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d825      	bhi.n	8002920 <RCCEx_PLLSAI1_Config+0xa4>
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d002      	beq.n	80028de <RCCEx_PLLSAI1_Config+0x62>
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d009      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0x74>
 80028dc:	e020      	b.n	8002920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028de:	4b5f      	ldr	r3, [pc, #380]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d11d      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ee:	e01a      	b.n	8002926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f0:	4b5a      	ldr	r3, [pc, #360]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d116      	bne.n	800292a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e013      	b.n	800292a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002902:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800290e:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800291e:	e006      	b.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e004      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002936:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	430b      	orrs	r3, r1
 800294c:	4943      	ldr	r1, [pc, #268]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800294e:	4313      	orrs	r3, r2
 8002950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d17c      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002958:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a3f      	ldr	r2, [pc, #252]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800295e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002964:	f7fe f900 	bl	8000b68 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800296a:	e009      	b.n	8002980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800296c:	f7fe f8fc 	bl	8000b68 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d902      	bls.n	8002980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	73fb      	strb	r3, [r7, #15]
        break;
 800297e:	e005      	b.n	800298c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ef      	bne.n	800296c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d15f      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d110      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80029a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6892      	ldr	r2, [r2, #8]
 80029a8:	0211      	lsls	r1, r2, #8
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	06d2      	lsls	r2, r2, #27
 80029b0:	430a      	orrs	r2, r1
 80029b2:	492a      	ldr	r1, [pc, #168]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	610b      	str	r3, [r1, #16]
 80029b8:	e027      	b.n	8002a0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d112      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c0:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6892      	ldr	r2, [r2, #8]
 80029d0:	0211      	lsls	r1, r2, #8
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6912      	ldr	r2, [r2, #16]
 80029d6:	0852      	lsrs	r2, r2, #1
 80029d8:	3a01      	subs	r2, #1
 80029da:	0552      	lsls	r2, r2, #21
 80029dc:	430a      	orrs	r2, r1
 80029de:	491f      	ldr	r1, [pc, #124]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	610b      	str	r3, [r1, #16]
 80029e4:	e011      	b.n	8002a0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6892      	ldr	r2, [r2, #8]
 80029f6:	0211      	lsls	r1, r2, #8
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6952      	ldr	r2, [r2, #20]
 80029fc:	0852      	lsrs	r2, r2, #1
 80029fe:	3a01      	subs	r2, #1
 8002a00:	0652      	lsls	r2, r2, #25
 8002a02:	430a      	orrs	r2, r1
 8002a04:	4915      	ldr	r1, [pc, #84]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7fe f8a7 	bl	8000b68 <HAL_GetTick>
 8002a1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a1c:	e009      	b.n	8002a32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a1e:	f7fe f8a3 	bl	8000b68 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d902      	bls.n	8002a32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	73fb      	strb	r3, [r7, #15]
          break;
 8002a30:	e005      	b.n	8002a3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ef      	beq.n	8002a1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	4903      	ldr	r1, [pc, #12]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a6e:	4b69      	ldr	r3, [pc, #420]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d018      	beq.n	8002aac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a7a:	4b66      	ldr	r3, [pc, #408]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0203 	and.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d10d      	bne.n	8002aa6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a92:	4b60      	ldr	r3, [pc, #384]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
       ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d047      	beq.n	8002b36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	e044      	b.n	8002b36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d018      	beq.n	8002ae6 <RCCEx_PLLSAI2_Config+0x86>
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d825      	bhi.n	8002b04 <RCCEx_PLLSAI2_Config+0xa4>
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d002      	beq.n	8002ac2 <RCCEx_PLLSAI2_Config+0x62>
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d009      	beq.n	8002ad4 <RCCEx_PLLSAI2_Config+0x74>
 8002ac0:	e020      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ac2:	4b54      	ldr	r3, [pc, #336]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11d      	bne.n	8002b0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad2:	e01a      	b.n	8002b0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d116      	bne.n	8002b0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae4:	e013      	b.n	8002b0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ae6:	4b4b      	ldr	r3, [pc, #300]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002af2:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b02:	e006      	b.n	8002b12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      break;
 8002b08:	e004      	b.n	8002b14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e002      	b.n	8002b14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10d      	bne.n	8002b36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b1a:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	4938      	ldr	r1, [pc, #224]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d166      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b3c:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b48:	f7fe f80e 	bl	8000b68 <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b4e:	e009      	b.n	8002b64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b50:	f7fe f80a 	bl	8000b68 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d902      	bls.n	8002b64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	73fb      	strb	r3, [r7, #15]
        break;
 8002b62:	e005      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ef      	bne.n	8002b50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d149      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d110      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b7c:	4b25      	ldr	r3, [pc, #148]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6892      	ldr	r2, [r2, #8]
 8002b8c:	0211      	lsls	r1, r2, #8
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	06d2      	lsls	r2, r2, #27
 8002b94:	430a      	orrs	r2, r1
 8002b96:	491f      	ldr	r1, [pc, #124]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	614b      	str	r3, [r1, #20]
 8002b9c:	e011      	b.n	8002bc2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ba6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6892      	ldr	r2, [r2, #8]
 8002bae:	0211      	lsls	r1, r2, #8
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6912      	ldr	r2, [r2, #16]
 8002bb4:	0852      	lsrs	r2, r2, #1
 8002bb6:	3a01      	subs	r2, #1
 8002bb8:	0652      	lsls	r2, r2, #25
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	4915      	ldr	r1, [pc, #84]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7fd ffcb 	bl	8000b68 <HAL_GetTick>
 8002bd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bd4:	e009      	b.n	8002bea <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bd6:	f7fd ffc7 	bl	8000b68 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d902      	bls.n	8002bea <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	73fb      	strb	r3, [r7, #15]
          break;
 8002be8:	e005      	b.n	8002bf6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ef      	beq.n	8002bd6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d106      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	4903      	ldr	r1, [pc, #12]	; (8002c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e040      	b.n	8002cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fd fddc 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fe3e 	bl	80038e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fb83 	bl	8003370 <UART_SetConfig>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e01b      	b.n	8002cac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 febd 	bl	8003a24 <UART_CheckIdleState>
 8002caa:	4603      	mov	r3, r0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b08b      	sub	sp, #44	; 0x2c
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d147      	bne.n	8002d5a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_UART_Transmit_IT+0x22>
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e040      	b.n	8002d5c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2221      	movs	r2, #33	; 0x21
 8002d02:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0c:	d107      	bne.n	8002d1e <HAL_UART_Transmit_IT+0x6a>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d103      	bne.n	8002d1e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <HAL_UART_Transmit_IT+0xb4>)
 8002d1a:	66da      	str	r2, [r3, #108]	; 0x6c
 8002d1c:	e002      	b.n	8002d24 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <HAL_UART_Transmit_IT+0xb8>)
 8002d22:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	613b      	str	r3, [r7, #16]
   return(result);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	69f9      	ldr	r1, [r7, #28]
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e6      	bne.n	8002d24 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
  }
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	372c      	adds	r7, #44	; 0x2c
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	08003def 	.word	0x08003def
 8002d6c:	08003d37 	.word	0x08003d37

08002d70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0ba      	sub	sp, #232	; 0xe8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d9e:	4013      	ands	r3, r2
 8002da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d115      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00f      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 82ae 	beq.w	800332a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
      }
      return;
 8002dd6:	e2a8      	b.n	800332a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8117 	beq.w	8003010 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002df2:	4b85      	ldr	r3, [pc, #532]	; (8003008 <HAL_UART_IRQHandler+0x298>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 810a 	beq.w	8003010 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d011      	beq.n	8002e2c <HAL_UART_IRQHandler+0xbc>
 8002e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d011      	beq.n	8002e5c <HAL_UART_IRQHandler+0xec>
 8002e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e52:	f043 0204 	orr.w	r2, r3, #4
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d011      	beq.n	8002e8c <HAL_UART_IRQHandler+0x11c>
 8002e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00b      	beq.n	8002e8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e82:	f043 0202 	orr.w	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d017      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ebe:	f043 0208 	orr.w	r2, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d012      	beq.n	8002efa <HAL_UART_IRQHandler+0x18a>
 8002ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef0:	f043 0220 	orr.w	r2, r3, #32
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8214 	beq.w	800332e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d005      	beq.n	8002f52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d04f      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fe75 	bl	8003c42 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d141      	bne.n	8002fea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3308      	adds	r3, #8
 8002f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1d9      	bne.n	8002f66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d013      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbe:	4a13      	ldr	r2, [pc, #76]	; (800300c <HAL_UART_IRQHandler+0x29c>)
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe f806 	bl	8000fd8 <HAL_DMA_Abort_IT>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d017      	beq.n	8003002 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	e00f      	b.n	8003002 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9ae 	bl	8003344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	e00b      	b.n	8003002 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f9aa 	bl	8003344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	e007      	b.n	8003002 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f9a6 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003000:	e195      	b.n	800332e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003002:	bf00      	nop
    return;
 8003004:	e193      	b.n	800332e <HAL_UART_IRQHandler+0x5be>
 8003006:	bf00      	nop
 8003008:	04000120 	.word	0x04000120
 800300c:	08003d0b 	.word	0x08003d0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003014:	2b01      	cmp	r3, #1
 8003016:	f040 814e 	bne.w	80032b6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8147 	beq.w	80032b6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8140 	beq.w	80032b6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2210      	movs	r2, #16
 800303c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	f040 80b8 	bne.w	80031be <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800305a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8167 	beq.w	8003332 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800306a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800306e:	429a      	cmp	r2, r3
 8003070:	f080 815f 	bcs.w	8003332 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800307a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 8086 	bne.w	800319c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1da      	bne.n	8003090 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3308      	adds	r3, #8
 80030e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3308      	adds	r3, #8
 80030fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003102:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003106:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e1      	bne.n	80030da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3308      	adds	r3, #8
 800311c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3308      	adds	r3, #8
 8003136:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800313a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800313c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003140:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e3      	bne.n	8003116 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800316a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800316c:	f023 0310 	bic.w	r3, r3, #16
 8003170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800317e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003180:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800318c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e4      	bne.n	800315c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd fee0 	bl	8000f5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8ce 	bl	8003358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031bc:	e0b9      	b.n	8003332 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80ab 	beq.w	8003336 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80031e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a6 	beq.w	8003336 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800320c:	647b      	str	r3, [r7, #68]	; 0x44
 800320e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e4      	bne.n	80031ea <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3308      	adds	r3, #8
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	623b      	str	r3, [r7, #32]
   return(result);
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3308      	adds	r3, #8
 8003240:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003244:	633a      	str	r2, [r7, #48]	; 0x30
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800324a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e3      	bne.n	8003220 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	60fb      	str	r3, [r7, #12]
   return(result);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f023 0310 	bic.w	r3, r3, #16
 8003280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	69b9      	ldr	r1, [r7, #24]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	617b      	str	r3, [r7, #20]
   return(result);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e4      	bne.n	800326c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f852 	bl	8003358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032b4:	e03f      	b.n	8003336 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00e      	beq.n	80032e0 <HAL_UART_IRQHandler+0x570>
 80032c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fe12 	bl	8003f02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032de:	e02d      	b.n	800333c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00e      	beq.n	800330a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01c      	beq.n	800333a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	4798      	blx	r3
    }
    return;
 8003308:	e017      	b.n	800333a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800330a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <HAL_UART_IRQHandler+0x5cc>
 8003316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00c      	beq.n	800333c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fdc3 	bl	8003eae <UART_EndTransmit_IT>
    return;
 8003328:	e008      	b.n	800333c <HAL_UART_IRQHandler+0x5cc>
      return;
 800332a:	bf00      	nop
 800332c:	e006      	b.n	800333c <HAL_UART_IRQHandler+0x5cc>
    return;
 800332e:	bf00      	nop
 8003330:	e004      	b.n	800333c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <HAL_UART_IRQHandler+0x5cc>
    return;
 800333a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800333c:	37e8      	adds	r7, #232	; 0xe8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop

08003344 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b08a      	sub	sp, #40	; 0x28
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	431a      	orrs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	431a      	orrs	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4313      	orrs	r3, r2
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4ba4      	ldr	r3, [pc, #656]	; (8003630 <UART_SetConfig+0x2c0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a99      	ldr	r2, [pc, #612]	; (8003634 <UART_SetConfig+0x2c4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d8:	4313      	orrs	r3, r2
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ec:	430a      	orrs	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a90      	ldr	r2, [pc, #576]	; (8003638 <UART_SetConfig+0x2c8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d126      	bne.n	8003448 <UART_SetConfig+0xd8>
 80033fa:	4b90      	ldr	r3, [pc, #576]	; (800363c <UART_SetConfig+0x2cc>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b03      	cmp	r3, #3
 8003406:	d81b      	bhi.n	8003440 <UART_SetConfig+0xd0>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0xa0>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	08003431 	.word	0x08003431
 8003418:	08003429 	.word	0x08003429
 800341c:	08003439 	.word	0x08003439
 8003420:	2301      	movs	r3, #1
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003426:	e116      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003428:	2302      	movs	r3, #2
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342e:	e112      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003430:	2304      	movs	r3, #4
 8003432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003436:	e10e      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003438:	2308      	movs	r3, #8
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800343e:	e10a      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003440:	2310      	movs	r3, #16
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003446:	e106      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7c      	ldr	r2, [pc, #496]	; (8003640 <UART_SetConfig+0x2d0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d138      	bne.n	80034c4 <UART_SetConfig+0x154>
 8003452:	4b7a      	ldr	r3, [pc, #488]	; (800363c <UART_SetConfig+0x2cc>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d82d      	bhi.n	80034bc <UART_SetConfig+0x14c>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <UART_SetConfig+0xf8>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	0800349d 	.word	0x0800349d
 800346c:	080034bd 	.word	0x080034bd
 8003470:	080034bd 	.word	0x080034bd
 8003474:	080034bd 	.word	0x080034bd
 8003478:	080034ad 	.word	0x080034ad
 800347c:	080034bd 	.word	0x080034bd
 8003480:	080034bd 	.word	0x080034bd
 8003484:	080034bd 	.word	0x080034bd
 8003488:	080034a5 	.word	0x080034a5
 800348c:	080034bd 	.word	0x080034bd
 8003490:	080034bd 	.word	0x080034bd
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034b5 	.word	0x080034b5
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a2:	e0d8      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034a4:	2302      	movs	r3, #2
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034aa:	e0d4      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034ac:	2304      	movs	r3, #4
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e0d0      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034b4:	2308      	movs	r3, #8
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e0cc      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034bc:	2310      	movs	r3, #16
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e0c8      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5e      	ldr	r2, [pc, #376]	; (8003644 <UART_SetConfig+0x2d4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d125      	bne.n	800351a <UART_SetConfig+0x1aa>
 80034ce:	4b5b      	ldr	r3, [pc, #364]	; (800363c <UART_SetConfig+0x2cc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d016      	beq.n	800350a <UART_SetConfig+0x19a>
 80034dc:	2b30      	cmp	r3, #48	; 0x30
 80034de:	d818      	bhi.n	8003512 <UART_SetConfig+0x1a2>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d00a      	beq.n	80034fa <UART_SetConfig+0x18a>
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d814      	bhi.n	8003512 <UART_SetConfig+0x1a2>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <UART_SetConfig+0x182>
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d008      	beq.n	8003502 <UART_SetConfig+0x192>
 80034f0:	e00f      	b.n	8003512 <UART_SetConfig+0x1a2>
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f8:	e0ad      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034fa:	2302      	movs	r3, #2
 80034fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003500:	e0a9      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003502:	2304      	movs	r3, #4
 8003504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003508:	e0a5      	b.n	8003656 <UART_SetConfig+0x2e6>
 800350a:	2308      	movs	r3, #8
 800350c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003510:	e0a1      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003512:	2310      	movs	r3, #16
 8003514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003518:	e09d      	b.n	8003656 <UART_SetConfig+0x2e6>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <UART_SetConfig+0x2d8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d125      	bne.n	8003570 <UART_SetConfig+0x200>
 8003524:	4b45      	ldr	r3, [pc, #276]	; (800363c <UART_SetConfig+0x2cc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800352e:	2bc0      	cmp	r3, #192	; 0xc0
 8003530:	d016      	beq.n	8003560 <UART_SetConfig+0x1f0>
 8003532:	2bc0      	cmp	r3, #192	; 0xc0
 8003534:	d818      	bhi.n	8003568 <UART_SetConfig+0x1f8>
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d00a      	beq.n	8003550 <UART_SetConfig+0x1e0>
 800353a:	2b80      	cmp	r3, #128	; 0x80
 800353c:	d814      	bhi.n	8003568 <UART_SetConfig+0x1f8>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <UART_SetConfig+0x1d8>
 8003542:	2b40      	cmp	r3, #64	; 0x40
 8003544:	d008      	beq.n	8003558 <UART_SetConfig+0x1e8>
 8003546:	e00f      	b.n	8003568 <UART_SetConfig+0x1f8>
 8003548:	2300      	movs	r3, #0
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354e:	e082      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003550:	2302      	movs	r3, #2
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003556:	e07e      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003558:	2304      	movs	r3, #4
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355e:	e07a      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003560:	2308      	movs	r3, #8
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003566:	e076      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003568:	2310      	movs	r3, #16
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e072      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a35      	ldr	r2, [pc, #212]	; (800364c <UART_SetConfig+0x2dc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d12a      	bne.n	80035d0 <UART_SetConfig+0x260>
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <UART_SetConfig+0x2cc>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003588:	d01a      	beq.n	80035c0 <UART_SetConfig+0x250>
 800358a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800358e:	d81b      	bhi.n	80035c8 <UART_SetConfig+0x258>
 8003590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003594:	d00c      	beq.n	80035b0 <UART_SetConfig+0x240>
 8003596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359a:	d815      	bhi.n	80035c8 <UART_SetConfig+0x258>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <UART_SetConfig+0x238>
 80035a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a4:	d008      	beq.n	80035b8 <UART_SetConfig+0x248>
 80035a6:	e00f      	b.n	80035c8 <UART_SetConfig+0x258>
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ae:	e052      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035b0:	2302      	movs	r3, #2
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b6:	e04e      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035b8:	2304      	movs	r3, #4
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035be:	e04a      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035c0:	2308      	movs	r3, #8
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c6:	e046      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035c8:	2310      	movs	r3, #16
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e042      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a17      	ldr	r2, [pc, #92]	; (8003634 <UART_SetConfig+0x2c4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d13a      	bne.n	8003650 <UART_SetConfig+0x2e0>
 80035da:	4b18      	ldr	r3, [pc, #96]	; (800363c <UART_SetConfig+0x2cc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e8:	d01a      	beq.n	8003620 <UART_SetConfig+0x2b0>
 80035ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ee:	d81b      	bhi.n	8003628 <UART_SetConfig+0x2b8>
 80035f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f4:	d00c      	beq.n	8003610 <UART_SetConfig+0x2a0>
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fa:	d815      	bhi.n	8003628 <UART_SetConfig+0x2b8>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <UART_SetConfig+0x298>
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d008      	beq.n	8003618 <UART_SetConfig+0x2a8>
 8003606:	e00f      	b.n	8003628 <UART_SetConfig+0x2b8>
 8003608:	2300      	movs	r3, #0
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360e:	e022      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003610:	2302      	movs	r3, #2
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e01e      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003618:	2304      	movs	r3, #4
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e01a      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003620:	2308      	movs	r3, #8
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e016      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003628:	2310      	movs	r3, #16
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e012      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003630:	efff69f3 	.word	0xefff69f3
 8003634:	40008000 	.word	0x40008000
 8003638:	40013800 	.word	0x40013800
 800363c:	40021000 	.word	0x40021000
 8003640:	40004400 	.word	0x40004400
 8003644:	40004800 	.word	0x40004800
 8003648:	40004c00 	.word	0x40004c00
 800364c:	40005000 	.word	0x40005000
 8003650:	2310      	movs	r3, #16
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a9f      	ldr	r2, [pc, #636]	; (80038d8 <UART_SetConfig+0x568>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d17a      	bne.n	8003756 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003660:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003664:	2b08      	cmp	r3, #8
 8003666:	d824      	bhi.n	80036b2 <UART_SetConfig+0x342>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_SetConfig+0x300>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003695 	.word	0x08003695
 8003674:	080036b3 	.word	0x080036b3
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036b3 	.word	0x080036b3
 8003680:	080036a3 	.word	0x080036a3
 8003684:	080036b3 	.word	0x080036b3
 8003688:	080036b3 	.word	0x080036b3
 800368c:	080036b3 	.word	0x080036b3
 8003690:	080036ab 	.word	0x080036ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7fe fd6a 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8003698:	61f8      	str	r0, [r7, #28]
        break;
 800369a:	e010      	b.n	80036be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800369c:	4b8f      	ldr	r3, [pc, #572]	; (80038dc <UART_SetConfig+0x56c>)
 800369e:	61fb      	str	r3, [r7, #28]
        break;
 80036a0:	e00d      	b.n	80036be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a2:	f7fe fccb 	bl	800203c <HAL_RCC_GetSysClockFreq>
 80036a6:	61f8      	str	r0, [r7, #28]
        break;
 80036a8:	e009      	b.n	80036be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ae:	61fb      	str	r3, [r7, #28]
        break;
 80036b0:	e005      	b.n	80036be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80fb 	beq.w	80038bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d305      	bcc.n	80036e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d903      	bls.n	80036ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036e8:	e0e8      	b.n	80038bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2200      	movs	r2, #0
 80036ee:	461c      	mov	r4, r3
 80036f0:	4615      	mov	r5, r2
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	022b      	lsls	r3, r5, #8
 80036fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003700:	0222      	lsls	r2, r4, #8
 8003702:	68f9      	ldr	r1, [r7, #12]
 8003704:	6849      	ldr	r1, [r1, #4]
 8003706:	0849      	lsrs	r1, r1, #1
 8003708:	2000      	movs	r0, #0
 800370a:	4688      	mov	r8, r1
 800370c:	4681      	mov	r9, r0
 800370e:	eb12 0a08 	adds.w	sl, r2, r8
 8003712:	eb43 0b09 	adc.w	fp, r3, r9
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003724:	4650      	mov	r0, sl
 8003726:	4659      	mov	r1, fp
 8003728:	f7fc fd60 	bl	80001ec <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800373a:	d308      	bcc.n	800374e <UART_SetConfig+0x3de>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003742:	d204      	bcs.n	800374e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	e0b6      	b.n	80038bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003754:	e0b2      	b.n	80038bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375e:	d15e      	bne.n	800381e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003764:	2b08      	cmp	r3, #8
 8003766:	d828      	bhi.n	80037ba <UART_SetConfig+0x44a>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_SetConfig+0x400>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003795 	.word	0x08003795
 8003774:	0800379d 	.word	0x0800379d
 8003778:	080037a5 	.word	0x080037a5
 800377c:	080037bb 	.word	0x080037bb
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037bb 	.word	0x080037bb
 8003788:	080037bb 	.word	0x080037bb
 800378c:	080037bb 	.word	0x080037bb
 8003790:	080037b3 	.word	0x080037b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7fe fcea 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8003798:	61f8      	str	r0, [r7, #28]
        break;
 800379a:	e014      	b.n	80037c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7fe fcfc 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 80037a0:	61f8      	str	r0, [r7, #28]
        break;
 80037a2:	e010      	b.n	80037c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a4:	4b4d      	ldr	r3, [pc, #308]	; (80038dc <UART_SetConfig+0x56c>)
 80037a6:	61fb      	str	r3, [r7, #28]
        break;
 80037a8:	e00d      	b.n	80037c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7fe fc47 	bl	800203c <HAL_RCC_GetSysClockFreq>
 80037ae:	61f8      	str	r0, [r7, #28]
        break;
 80037b0:	e009      	b.n	80037c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b6:	61fb      	str	r3, [r7, #28]
        break;
 80037b8:	e005      	b.n	80037c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d077      	beq.n	80038bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005a      	lsls	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	441a      	add	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b0f      	cmp	r3, #15
 80037e6:	d916      	bls.n	8003816 <UART_SetConfig+0x4a6>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ee:	d212      	bcs.n	8003816 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f023 030f 	bic.w	r3, r3, #15
 80037f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	b29a      	uxth	r2, r3
 8003806:	8afb      	ldrh	r3, [r7, #22]
 8003808:	4313      	orrs	r3, r2
 800380a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	8afa      	ldrh	r2, [r7, #22]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	e052      	b.n	80038bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800381c:	e04e      	b.n	80038bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800381e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003822:	2b08      	cmp	r3, #8
 8003824:	d827      	bhi.n	8003876 <UART_SetConfig+0x506>
 8003826:	a201      	add	r2, pc, #4	; (adr r2, 800382c <UART_SetConfig+0x4bc>)
 8003828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382c:	08003851 	.word	0x08003851
 8003830:	08003859 	.word	0x08003859
 8003834:	08003861 	.word	0x08003861
 8003838:	08003877 	.word	0x08003877
 800383c:	08003867 	.word	0x08003867
 8003840:	08003877 	.word	0x08003877
 8003844:	08003877 	.word	0x08003877
 8003848:	08003877 	.word	0x08003877
 800384c:	0800386f 	.word	0x0800386f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003850:	f7fe fc8c 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8003854:	61f8      	str	r0, [r7, #28]
        break;
 8003856:	e014      	b.n	8003882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003858:	f7fe fc9e 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 800385c:	61f8      	str	r0, [r7, #28]
        break;
 800385e:	e010      	b.n	8003882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <UART_SetConfig+0x56c>)
 8003862:	61fb      	str	r3, [r7, #28]
        break;
 8003864:	e00d      	b.n	8003882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003866:	f7fe fbe9 	bl	800203c <HAL_RCC_GetSysClockFreq>
 800386a:	61f8      	str	r0, [r7, #28]
        break;
 800386c:	e009      	b.n	8003882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800386e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003872:	61fb      	str	r3, [r7, #28]
        break;
 8003874:	e005      	b.n	8003882 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003880:	bf00      	nop
    }

    if (pclk != 0U)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d019      	beq.n	80038bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	085a      	lsrs	r2, r3, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	441a      	add	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b0f      	cmp	r3, #15
 80038a0:	d909      	bls.n	80038b6 <UART_SetConfig+0x546>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a8:	d205      	bcs.n	80038b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	e002      	b.n	80038bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d6:	bf00      	nop
 80038d8:	40008000 	.word	0x40008000
 80038dc:	00f42400 	.word	0x00f42400

080038e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01a      	beq.n	80039f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039de:	d10a      	bne.n	80039f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b098      	sub	sp, #96	; 0x60
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a34:	f7fd f898 	bl	8000b68 <HAL_GetTick>
 8003a38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d12e      	bne.n	8003aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f88c 	bl	8003b74 <UART_WaitOnFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d021      	beq.n	8003aa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a76:	653b      	str	r3, [r7, #80]	; 0x50
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a80:	647b      	str	r3, [r7, #68]	; 0x44
 8003a82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e6      	bne.n	8003a62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e062      	b.n	8003b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d149      	bne.n	8003b48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abc:	2200      	movs	r2, #0
 8003abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f856 	bl	8003b74 <UART_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d03c      	beq.n	8003b48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	623b      	str	r3, [r7, #32]
   return(result);
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
 8003aee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e6      	bne.n	8003ace <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3308      	adds	r3, #8
 8003b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b20:	61fa      	str	r2, [r7, #28]
 8003b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e5      	bne.n	8003b00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e011      	b.n	8003b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3758      	adds	r7, #88	; 0x58
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b84:	e049      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d045      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fc ffeb 	bl	8000b68 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e048      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d031      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d110      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f838 	bl	8003c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e029      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf4:	d111      	bne.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f81e 	bl	8003c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e00f      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d0a6      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b095      	sub	sp, #84	; 0x54
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c68:	643b      	str	r3, [r7, #64]	; 0x40
 8003c6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e6      	bne.n	8003c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3308      	adds	r3, #8
 8003c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d118      	bne.n	8003cea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f023 0310 	bic.w	r3, r3, #16
 8003ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6979      	ldr	r1, [r7, #20]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cfe:	bf00      	nop
 8003d00:	3754      	adds	r7, #84	; 0x54
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff fb0b 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b08f      	sub	sp, #60	; 0x3c
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d42:	2b21      	cmp	r3, #33	; 0x21
 8003d44:	d14d      	bne.n	8003de2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d132      	bne.n	8003db8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e6      	bne.n	8003d52 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d98:	633b      	str	r3, [r7, #48]	; 0x30
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6979      	ldr	r1, [r7, #20]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	613b      	str	r3, [r7, #16]
   return(result);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e6      	bne.n	8003d84 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003db6:	e014      	b.n	8003de2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbc:	781a      	ldrb	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003de2:	bf00      	nop
 8003de4:	373c      	adds	r7, #60	; 0x3c
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b091      	sub	sp, #68	; 0x44
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfa:	2b21      	cmp	r3, #33	; 0x21
 8003dfc:	d151      	bne.n	8003ea2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d132      	bne.n	8003e70 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	623b      	str	r3, [r7, #32]
   return(result);
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e6      	bne.n	8003e0a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	69b9      	ldr	r1, [r7, #24]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	617b      	str	r3, [r7, #20]
   return(result);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e6      	bne.n	8003e3c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e6e:	e018      	b.n	8003ea2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e78:	881a      	ldrh	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e82:	b292      	uxth	r2, r2
 8003e84:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8a:	1c9a      	adds	r2, r3, #2
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003ea2:	bf00      	nop
 8003ea4:	3744      	adds	r7, #68	; 0x44
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b088      	sub	sp, #32
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6979      	ldr	r1, [r7, #20]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e6      	bne.n	8003eb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7fc faf7 	bl	80004e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003efa:	bf00      	nop
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <memset>:
 8003f16:	4402      	add	r2, r0
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d100      	bne.n	8003f20 <memset+0xa>
 8003f1e:	4770      	bx	lr
 8003f20:	f803 1b01 	strb.w	r1, [r3], #1
 8003f24:	e7f9      	b.n	8003f1a <memset+0x4>
	...

08003f28 <__libc_init_array>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	4d0d      	ldr	r5, [pc, #52]	; (8003f60 <__libc_init_array+0x38>)
 8003f2c:	4c0d      	ldr	r4, [pc, #52]	; (8003f64 <__libc_init_array+0x3c>)
 8003f2e:	1b64      	subs	r4, r4, r5
 8003f30:	10a4      	asrs	r4, r4, #2
 8003f32:	2600      	movs	r6, #0
 8003f34:	42a6      	cmp	r6, r4
 8003f36:	d109      	bne.n	8003f4c <__libc_init_array+0x24>
 8003f38:	4d0b      	ldr	r5, [pc, #44]	; (8003f68 <__libc_init_array+0x40>)
 8003f3a:	4c0c      	ldr	r4, [pc, #48]	; (8003f6c <__libc_init_array+0x44>)
 8003f3c:	f000 f818 	bl	8003f70 <_init>
 8003f40:	1b64      	subs	r4, r4, r5
 8003f42:	10a4      	asrs	r4, r4, #2
 8003f44:	2600      	movs	r6, #0
 8003f46:	42a6      	cmp	r6, r4
 8003f48:	d105      	bne.n	8003f56 <__libc_init_array+0x2e>
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f50:	4798      	blx	r3
 8003f52:	3601      	adds	r6, #1
 8003f54:	e7ee      	b.n	8003f34 <__libc_init_array+0xc>
 8003f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5a:	4798      	blx	r3
 8003f5c:	3601      	adds	r6, #1
 8003f5e:	e7f2      	b.n	8003f46 <__libc_init_array+0x1e>
 8003f60:	08003fd8 	.word	0x08003fd8
 8003f64:	08003fd8 	.word	0x08003fd8
 8003f68:	08003fd8 	.word	0x08003fd8
 8003f6c:	08003fdc 	.word	0x08003fdc

08003f70 <_init>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	bf00      	nop
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr

08003f7c <_fini>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr
